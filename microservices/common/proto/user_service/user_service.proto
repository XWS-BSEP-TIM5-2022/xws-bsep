syntax="proto3";

package user_service;

option go_package = "github.com/XWS-BSEP-TIM5-2022/xws-bsep/microservices/common/proto/user";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service UserService{
    rpc Get(GetRequest) returns(GetResponse) {  // auth
    option (google.api.http) = {
        get: "/api/user/{id}"
    };
    }

    rpc GetEmail(GetRequest) returns(GetEmailResponse) {  // auth
        option (google.api.http) = {
            get: "/api/user/email/{id}"
        };
    }

    rpc GetAll(GetAllRequest) returns(GetAllResponse) { // auth
        option (google.api.http) = {
        get: "/api/user"
    };
    }
    rpc GetAllPublic(GetAllPublicRequest) returns(GetAllPublicResponse) {
        option (google.api.http) = {
            get: "/api/user/public"
        };
    }
    rpc Insert(InsertRequest) returns(InsertResponse) {  // auth
        option (google.api.http) = {
                post: "/api/user"
                body: "user"
        };
    }
    rpc Update(UpdateRequest) returns(UpdateResponse) {  // auth
        option (google.api.http) = {
            put: "/api/user/update"
            body: "user"
        };
    }
    rpc UpdateBasicInfo(UpdateRequest) returns(UpdateResponse) {  // auth
        option (google.api.http) = {
            put: "/api/user/updateBasicInfo"
            body: "user"
        };
    }
    rpc UpdateExperienceAndEducation(UpdateRequest) returns(UpdateResponse) {  // auth
        option (google.api.http) = {
            put: "/api/user/updateExperienceAndEducation"
            body: "user"
        };
    }
    rpc UpdateSkillsAndInterests(UpdateRequest) returns(UpdateResponse) {  // auth
        option (google.api.http) = {
            put: "/api/user/updateSkillsAndInterests"
            body: "user"
        };
    }
    rpc GetLoggedInUserInfo(GetAllRequest) returns (User) { // auth
        option (google.api.http) = {
          get: "/api/user/info"
        };
    }
    rpc Search(SearchRequest) returns(SearchResponse) {
        option (google.api.http) = {
            get: "/api/user/search/{criteria}"
        };
    } 
    rpc UpdateIsActiveById(ActivateAccountRequest) returns (ActivateAccountResponse) {
        option (google.api.http) = {
            put: "/api/user/updateIsActive"
        };
    }
    rpc GetIsActive(GetRequest) returns (IsActiveResponse) {
        option (google.api.http) = {
            get: "/api/user/isActive"
        };
    }
    rpc GetIdByEmail(GetIdByEmailRequest) returns (InsertResponse) {
        option (google.api.http) = {
            get: "/api/user/getIdByEmail"
        };
    }
    rpc GetIdByUsername(GetIdByUsernameRequest) returns (InsertResponse) {
        option (google.api.http) = {
            get: "/api/user/getIdByUsername"
        };
    }
    rpc Register(RegisterRequest) returns (RegisterResponse) {  // SD: prebaceno iz auth proto -> ostalo auth
        option (google.api.http) = {
          post: "/api/auth/register"
          body: "*"
        };
    }
}

message GetRequest {
    string id = 1;
}

message GetResponse {
    User user = 1;
}

message GetEmailResponse {
    string email = 1;
}


message GetAllRequest {
}

message GetAllResponse {
    repeated User users = 1;
}

message GetAllPublicRequest {
}

message GetAllPublicResponse {
    repeated User users = 1;
}

message CreateUserRequest {
    User user = 1;
}

message CreateUserResponse {
    User user = 1;
}

message InsertRequest {
    User user = 1;
}

message InsertResponse {
    string id = 1;
}

message UpdateRequest {
    User user = 1;
}

message UpdateResponse {
    string success = 1;
}

message LoginResponse {
    string success = 1; 
}

message SearchRequest {
    string criteria = 1;
}

message SearchResponse {
    repeated User users = 1;
}

message AuthUser{
    string username = 1;
    string password = 2;
}

message User {
    string id = 1;
    string name = 2;
    string lastName = 3;
    string email = 4;
    string mobileNumber = 5;
    enum GenderEnum {
        Female = 0;
        Male = 1;
    }
    GenderEnum gender = 6;
    google.protobuf.Timestamp birthday = 7;
    string biography = 8;
    bool isPublic = 9;
    repeated Education education = 10;
    repeated Experience experience = 11;
    repeated Skill skills = 12;
    repeated Interest interests = 13;
    bool isActive  = 14;
    repeated string role = 15;
    string username = 16;
}

message Education{
    string id=1;
    string name=2;
    enum EducationEnum {
        Primary = 0;
        Secondary = 1;
        Bachelor = 2;
        Master = 3;
        Doctorate = 4;
    }
    EducationEnum level=3;
    string place=4;
    google.protobuf.Timestamp startDate =5;
    google.protobuf.Timestamp endDate=6;
}

message Experience{
    string id=1;
    string name=2;
    string headline=3;
    string place=4;
    google.protobuf.Timestamp startDate =5;
    google.protobuf.Timestamp endDate=6;

}

message Skill{
    string id=1;
    string name=2;
}

message Interest{
    string id=1;
    string name=2;
    string description=3;
}

message ActivateAccountRequest {
    string id = 1;
}

message ActivateAccountResponse {
    string success = 1;
}

message IsActiveResponse {
    bool isActive = 1;
}

message GetIdByEmailRequest {
    string email = 1;
}

message GetIdByUsernameRequest {
    string username = 1;
}

message RegisterRequest {
    string name = 1;
    string lastName = 2;
    string email = 3;
    string mobileNumber = 4;
    enum GenderEnum {
        Female = 0;
        Male = 1;
    }
    GenderEnum gender = 5;
    google.protobuf.Timestamp birthday = 6;
    string username = 7;
    string biography = 8;
    string password = 9;
    //bool isPublic = 10;
    repeated Education education = 10;
    repeated Experience experience = 11;
    repeated Skill skills = 12;
    repeated Interest interests = 13;
    repeated string role = 14;
}

message RegisterResponse {
    string statusCode = 1;
    string message = 2;
}
