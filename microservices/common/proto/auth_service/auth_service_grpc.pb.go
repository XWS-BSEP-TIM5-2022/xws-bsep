// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: auth_service.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthhServiceClient is the client API for AuthhService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthhServiceClient interface {
	GetAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type authhServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthhServiceClient(cc grpc.ClientConnInterface) AuthhServiceClient {
	return &authhServiceClient{cc}
}

func (c *authhServiceClient) GetAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/auth_service.AuthhService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authhServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/auth_service.AuthhService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthhServiceServer is the server API for AuthhService service.
// All implementations must embed UnimplementedAuthhServiceServer
// for forward compatibility
type AuthhServiceServer interface {
	GetAll(context.Context, *GetRequest) (*GetResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedAuthhServiceServer()
}

// UnimplementedAuthhServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthhServiceServer struct {
}

func (UnimplementedAuthhServiceServer) GetAll(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAuthhServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAuthhServiceServer) mustEmbedUnimplementedAuthhServiceServer() {}

// UnsafeAuthhServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthhServiceServer will
// result in compilation errors.
type UnsafeAuthhServiceServer interface {
	mustEmbedUnimplementedAuthhServiceServer()
}

func RegisterAuthhServiceServer(s grpc.ServiceRegistrar, srv AuthhServiceServer) {
	s.RegisterService(&AuthhService_ServiceDesc, srv)
}

func _AuthhService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthhServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthhService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthhServiceServer).GetAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthhService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthhServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthhService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthhServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthhService_ServiceDesc is the grpc.ServiceDesc for AuthhService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthhService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.AuthhService",
	HandlerType: (*AuthhServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _AuthhService_GetAll_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _AuthhService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
